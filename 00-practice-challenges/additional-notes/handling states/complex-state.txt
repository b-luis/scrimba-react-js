
import React from 'react';
import ReactDOM from 'react-dom';

function App() {
    /**
     * Challenge: Convert the code below to use an array
     * held in state instead of a local variable. Initialize 
     * the state array with the same 2 items below
     * 
     * Don't worry about fixing `addItem` quite yet.
     */

    const [thingsArray, setThingsArray] = React.useState(["Thing 1", "Thing 2"])
    
    function addItem() {
        // We'll work on this next
        
        setThingsArray(prevThingsArray => [... ])
    }
    
    const thingsElements = thingsArray.map(thing => <p key={thing}>{thing}</p>)
    
    return (
        <div>
            <button onClick={addItem}>Add Item</button>
            {thingsElements}
        </div>
    )
}

ReactDOM.render(<App />, document.getElementById('root'));

Note: do not modify the state directly. so using push() is not a good idea.


Key Takeaway

So there are 3 ways when adding a value at the end on an array: 

    1. Using the spread operator (...something)

         is a popular and recommended approach for updating an array state in React. It creates a new array with the added value, preserving the immutability of the original state. This ensures that React can detect the state change and trigger a re-render of the component.

        
    2. Using concat
    3. Using push ( AVOID THIS! )
